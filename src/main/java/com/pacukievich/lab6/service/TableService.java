package com.pacukievich.lab6.service;

import com.pacukievich.lab6.model.FieldRequest;
import com.pacukievich.lab6.model.TableRequest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class TableService {
		private final JdbcTemplate jdbcTemplate;

		public TableService(JdbcTemplate jdbcTemplate) {
				this.jdbcTemplate = jdbcTemplate;
		}

		public void createTable(TableRequest request) {
				String sql = generateCreateTableSQL(request);
				jdbcTemplate.execute(sql);
		}

		private String generateCreateTableSQL(TableRequest request) {
				StringBuilder sql = new StringBuilder("CREATE TABLE " + request.getTableName() + " (");

				boolean hasPrimaryKey = false;
				List<String> columnDefinitions = new ArrayList<>();
				List<String> primaryKeys = new ArrayList<>(); // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö PRIMARY KEY

				for (FieldRequest field : request.getFields()) {
						StringBuilder columnDef = new StringBuilder(field.getName() + " " + field.getType());

						if (field.isNotNull()) {
								columnDef.append(" NOT NULL");
						}

						if (field.isUnique()) {
								columnDef.append(" UNIQUE");
						}

						if (field.isPrimaryKey()) {
								primaryKeys.add(field.getName()); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Å–ø–∏—Å–æ–∫ PRIMARY KEY
								hasPrimaryKey = true;
						}

						columnDefinitions.add(columnDef.toString());
				}

				// –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ –∏–º–µ–µ—Ç PRIMARY KEY, –¥–æ–±–∞–≤–ª—è–µ–º id SERIAL PRIMARY KEY
				if (!hasPrimaryKey) {
						columnDefinitions.add(0, "id SERIAL PRIMARY KEY");
				} else {
						sql.append(String.join(", ", columnDefinitions));
						sql.append(", PRIMARY KEY (").append(String.join(", ", primaryKeys)).append(")");
						sql.append(");");
						return sql.toString();
				}

				sql.append(String.join(", ", columnDefinitions)).append(");");

				return sql.toString();
		}
		// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		public List<String> getAllTables() {
				return jdbcTemplate.queryForList("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'", String.class);
		}

		// –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		public void deleteTable(String tableName) {
				String sql = "DROP TABLE IF EXISTS \"" + tableName + "\" CASCADE";
				jdbcTemplate.execute(sql);
		}


		public List<Map<String, Object>> getTableData(String tableName) {
				// –ó–∞–∫–ª—é—á–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
				String query = "SELECT * FROM \"" + tableName + "\"";
				return jdbcTemplate.queryForList(query);
		}


		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
		public void addColumns(String tableName, List<String> fieldsName, List<String> fieldsType, List<String> fieldsNotNull) {
				for (int i = 0; i < fieldsName.size(); i++) {
						String columnName = fieldsName.get(i);
						String columnType = fieldsType.get(i);
						boolean notNull = fieldsNotNull != null && fieldsNotNull.contains(String.valueOf(i));
						String sql = "ALTER TABLE \"" + tableName + "\" ADD COLUMN \"" + columnName + "\" " + columnType;
						if (notNull) {
								sql += " NOT NULL";
						}
						jdbcTemplate.execute(sql);
				}
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
		public void deleteColumn(String tableName, String columnName) {
				String sql = "ALTER TABLE \"" + tableName + "\" DROP COLUMN \"" + columnName + "\" CASCADE";
				jdbcTemplate.execute(sql);
		}

		public void deleteRow(String tableName, String id) {
				try {
						Long longId = Long.parseLong(id);
						String sql = "DELETE FROM \"" + tableName + "\" WHERE \"id\" = ?";
						jdbcTemplate.update(sql, longId);
				} catch (NumberFormatException e) {
						throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: " + id, e);
				}
		}

		public void updateOrInsertRow(String tableName, String id, Map<String, String> updateData) {
				try {
						Long longId = Long.parseLong(id);

						// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–∫–∏–º id
						String checkSql = "SELECT COUNT(*) FROM \"" + tableName + "\" WHERE \"id\" = ?";
						int count = jdbcTemplate.queryForObject(checkSql, new Object[]{longId}, Integer.class);

						if (count == 0) {
								// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º INSERT
								System.out.println("–°—Ç—Ä–æ–∫–∞ —Å id " + id + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏.");
								updateData.put("id", id); // –î–æ–±–∞–≤–ª—è–µ–º id –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
								insertRow(tableName, id, updateData); // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
						} else {
								// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º UPDATE
								System.out.println("–°—Ç—Ä–æ–∫–∞ —Å id " + id + " —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
								// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è "mouse" (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
								if (updateData.containsKey("mouse") && updateData.get("mouse").isEmpty()) {
										updateData.put("mouse", null); // –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ NULL
								}
								// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
								updateRow(tableName, id, updateData);
						}

				} catch (NumberFormatException e) {
						throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: " + id, e);
				}
		}

		public void updateRow(String tableName, String id, Map<String, String> updateData) {
				try {
						Long longId = Long.parseLong(id);

						// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ SET –∑–∞–ø—Ä–æ—Å–∞
						String setClause = updateData.entrySet().stream()
										.map(entry -> "\"" + entry.getKey() + "\" = ?")
										.collect(Collectors.joining(", "));

						Object[] params = new Object[updateData.size() + 1];
						int index = 0;
						for (Map.Entry<String, String> entry : updateData.entrySet()) {
								params[index++] = entry.getValue();
						}
						params[index] = longId;

						String sql = "UPDATE \"" + tableName + "\" SET " + setClause + " WHERE \"id\" = ?";

						// üîç –í—ã–≤–æ–¥–∏–º SQL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
						System.out.println("üì§ SQL –¥–ª—è updateRow: " + sql);
						System.out.println("üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è updateRow: " + Arrays.toString(params));

						// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
						jdbcTemplate.update(sql, params);

				} catch (NumberFormatException e) {
						throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: " + id, e);
				}
		}

		public void insertRow(String tableName, String id, Map<String, String> rowData) {
				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id –≤ Integer (–∏–ª–∏ Long –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
				Integer intId = Integer.parseInt(id); // –ï—Å–ª–∏ id - BIGINT, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Long.parseLong(id)

				// –î–æ–±–∞–≤–ª—è–µ–º id –≤ rowData –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
				rowData.put("id", String.valueOf(intId)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º intId –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ

				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
				String columns = rowData.keySet().stream()
								.map(col -> "\"" + col + "\"")
								.collect(Collectors.joining(", "));

				// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
				String placeholders = rowData.keySet().stream()
								.map(col -> "?")
								.collect(Collectors.joining(", "));

				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
				List<Object> values = new ArrayList<>();
				for (String column : rowData.keySet()) {
						String value = rowData.get(column);

						// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
						if ("id".equals(column)) {
								values.add(intId); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id –≤ Integer
						} else {
								values.add(value); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
						}
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
				String sql = "INSERT INTO \"" + tableName + "\" (" + columns + ") VALUES (" + placeholders + ")";

				// üîç –í—ã–≤–æ–¥–∏–º SQL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
				System.out.println("üì§ SQL –¥–ª—è insertRow: " + sql);
				System.out.println("üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è insertRow: " + values);

				// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É
				jdbcTemplate.update(sql, values.toArray());
		}





}
